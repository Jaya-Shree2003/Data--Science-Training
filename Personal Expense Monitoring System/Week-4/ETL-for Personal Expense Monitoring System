{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fblqcbKvmLTV"
      },
      "outputs": [],
      "source": [
        "\n",
        "!pip install pyspark -q"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install delta-spark==3.2.0 -q"
      ],
      "metadata": {
        "id": "uD5GT_a7me4C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pyspark\n",
        "from delta import *\n",
        "from pyspark.sql.functions import *\n",
        "\n",
        "# Create a SparkSession with Delta Lake extensions\n",
        "# The '.config(...)' lines are crucial for enabling Delta Lake's features\n",
        "builder = pyspark.sql.SparkSession.builder.appName(\"DeltaTutorial\") \\\n",
        "    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n",
        "    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\")\n",
        "\n",
        "# Get or create the SparkSession\n",
        "spark = configure_spark_with_delta_pip(builder).getOrCreate()\n",
        "\n",
        "print(\"Spark and Delta Lake are ready!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vf2TGkUwosHe",
        "outputId": "a8517e25-0d7c-4ee6-cb8d-7f8a4b81345c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Spark and Delta Lake are ready!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the CSV file\n",
        "df = pd.read_csv('cleaned_expenses (3).csv')\n",
        "\n",
        "# Display the data\n",
        "print(\"Original data:\")\n",
        "print(df.head())\n",
        "\n",
        "# 1. Create summary table with monthly spend by category\n",
        "monthly_spend = df.groupby(['user_id', 'month', 'category'])['amount'] \\\n",
        "                 .sum() \\\n",
        "                 .reset_index() \\\n",
        "                 .rename(columns={'amount': 'total_amount'}) \\\n",
        "                 .sort_values(['user_id', 'month'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6pLXgWAuyc3X",
        "outputId": "7772b114-9c5b-425d-e936-25141493b9e2"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original data:\n",
            "   expense_id  user_id  category_id  amount expense_date  \\\n",
            "0           1        1            1  1200.0   2025-07-01   \n",
            "1           2        1            2   300.0   2025-07-02   \n",
            "2           3        1            3   500.0   2025-07-10   \n",
            "3           4        2            1   900.0   2025-07-03   \n",
            "4           5        2            4  1100.0   2025-07-05   \n",
            "\n",
            "                description    month       category  \n",
            "0  Monthly grocery shopping  2025-07      Groceries  \n",
            "1                  Bus pass  2025-07      Transport  \n",
            "2               Movie night  2025-07  Entertainment  \n",
            "3                   Grocery  2025-07      Groceries  \n",
            "4          Electricity bill  2025-07      Utilities  \n",
            "\n",
            "Monthly spend by category:\n",
            "   user_id    month       category  total_amount\n",
            "0        1  2025-07  Entertainment         500.0\n",
            "1        1  2025-07      Groceries        1200.0\n",
            "2        1  2025-07      Transport         300.0\n",
            "3        2  2025-07      Groceries         900.0\n",
            "4        2  2025-07      Utilities        1100.0\n",
            "\n",
            "Total monthly spend:\n",
            "   user_id    month  total_spend\n",
            "0        1  2025-07       2000.0\n",
            "1        2  2025-07       2000.0\n",
            "\n",
            "Data with alerts:\n",
            "   user_id    month       category  total_amount  alert\n",
            "0        1  2025-07  Entertainment         500.0  False\n",
            "1        1  2025-07      Groceries        1200.0   True\n",
            "2        1  2025-07      Transport         300.0  False\n",
            "3        2  2025-07      Groceries         900.0  False\n",
            "4        2  2025-07      Utilities        1100.0   True\n",
            "\n",
            "Files saved as CSV:\n",
            "- monthly_spend_by_category.csv\n",
            "- total_monthly_spend.csv\n",
            "- alerts_data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. Create total monthly spend per user"
      ],
      "metadata": {
        "id": "kTI8ApGzzLov"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "total_monthly = df.groupby(['user_id', 'month'])['amount'] \\\n",
        "                 .sum() \\\n",
        "                 .reset_index() \\\n",
        "                 .rename(columns={'amount': 'total_spend'}) \\\n",
        "                 .sort_values(['user_id', 'month'])\n"
      ],
      "metadata": {
        "id": "_B0kceJWzGHv"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Add alerts (example: alert if any category spending > 1000)"
      ],
      "metadata": {
        "id": "AkTxm6r1zTFA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "alerts_df = monthly_spend.copy()\n",
        "alerts_df['alert'] = alerts_df['total_amount'] > 1000"
      ],
      "metadata": {
        "id": "S69ORlJBzGBP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Display results"
      ],
      "metadata": {
        "id": "lHnHq2nKzY4r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nMonthly spend by category:\")\n",
        "print(monthly_spend)\n",
        "\n",
        "print(\"\\nTotal monthly spend:\")\n",
        "print(total_monthly)\n",
        "\n",
        "print(\"\\nData with alerts:\")\n",
        "print(alerts_df)\n",
        "\n",
        "# Save to CSV\n",
        "monthly_spend.to_csv('monthly_spend_by_category.csv', index=False)\n",
        "total_monthly.to_csv('total_monthly_spend.csv', index=False)\n",
        "alerts_df.to_csv('alerts_data.csv', index=False)\n",
        "\n",
        "print(\"\\nFiles saved as CSV:\")\n",
        "print(\"- monthly_spend_by_category.csv\")\n",
        "print(\"- total_monthly_spend.csv\")\n",
        "print(\"- alerts_data.csv\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pH3L5ed2zUC4",
        "outputId": "ad14c28b-e12c-4c2b-9a94-fcd2e8d139b7"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Monthly spend by category:\n",
            "   user_id    month       category  total_amount\n",
            "0        1  2025-07  Entertainment         500.0\n",
            "1        1  2025-07      Groceries        1200.0\n",
            "2        1  2025-07      Transport         300.0\n",
            "3        2  2025-07      Groceries         900.0\n",
            "4        2  2025-07      Utilities        1100.0\n",
            "\n",
            "Total monthly spend:\n",
            "   user_id    month  total_spend\n",
            "0        1  2025-07       2000.0\n",
            "1        2  2025-07       2000.0\n",
            "\n",
            "Data with alerts:\n",
            "   user_id    month       category  total_amount  alert\n",
            "0        1  2025-07  Entertainment         500.0  False\n",
            "1        1  2025-07      Groceries        1200.0   True\n",
            "2        1  2025-07      Transport         300.0  False\n",
            "3        2  2025-07      Groceries         900.0  False\n",
            "4        2  2025-07      Utilities        1100.0   True\n",
            "\n",
            "Files saved as CSV:\n",
            "- monthly_spend_by_category.csv\n",
            "- total_monthly_spend.csv\n",
            "- alerts_data.csv\n"
          ]
        }
      ]
    }
  ]
}
